// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.2 (64-bit)
// Version: 2021.2
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="adder_adder,hls_ip_2021_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.853000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=2,HLS_SYN_LUT=58,HLS_VERSION=2021_2}" *)

module adder (
        ap_local_block,
        ap_local_deadlock,
        ap_clk,
        ap_rst_n,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_TVALID,
        b_TVALID,
        c_TREADY,
        a_TDATA,
        a_TREADY,
        b_TDATA,
        b_TREADY,
        c_TDATA,
        c_TVALID
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

output   ap_local_block;
output   ap_local_deadlock;
input   ap_clk;
input   ap_rst_n;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   a_TVALID;
input   b_TVALID;
input   c_TREADY;
input  [15:0] a_TDATA;
output   a_TREADY;
input  [15:0] b_TDATA;
output   b_TREADY;
output  [15:0] c_TDATA;
output   c_TVALID;

reg ap_done;
reg ap_idle;
reg ap_ready;

 reg    ap_rst_n_inv;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    regslice_both_c_U_apdone_blk;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
reg    a_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    b_TDATA_blk_n;
reg    c_TDATA_blk_n;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire    regslice_both_a_U_apdone_blk;
wire   [15:0] a_TDATA_int_regslice;
wire    a_TVALID_int_regslice;
reg    a_TREADY_int_regslice;
wire    regslice_both_a_U_ack_in;
wire    regslice_both_b_U_apdone_blk;
wire   [15:0] b_TDATA_int_regslice;
wire    b_TVALID_int_regslice;
reg    b_TREADY_int_regslice;
wire    regslice_both_b_U_ack_in;
wire   [15:0] c_TDATA_int_regslice;
reg    c_TVALID_int_regslice;
wire    c_TREADY_int_regslice;
wire    regslice_both_c_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

adder_regslice_both_adder #(
    .DataWidth( 16 ))
regslice_both_a_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(a_TDATA),
    .vld_in(a_TVALID),
    .ack_in(regslice_both_a_U_ack_in),
    .data_out(a_TDATA_int_regslice),
    .vld_out(a_TVALID_int_regslice),
    .ack_out(a_TREADY_int_regslice),
    .apdone_blk(regslice_both_a_U_apdone_blk)
);

adder_regslice_both_adder #(
    .DataWidth( 16 ))
regslice_both_b_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(b_TDATA),
    .vld_in(b_TVALID),
    .ack_in(regslice_both_b_U_ack_in),
    .data_out(b_TDATA_int_regslice),
    .vld_out(b_TVALID_int_regslice),
    .ack_out(b_TREADY_int_regslice),
    .apdone_blk(regslice_both_b_U_apdone_blk)
);

adder_regslice_both_adder #(
    .DataWidth( 16 ))
regslice_both_c_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(c_TDATA_int_regslice),
    .vld_in(c_TVALID_int_regslice),
    .ack_in(c_TREADY_int_regslice),
    .data_out(c_TDATA),
    .vld_out(regslice_both_c_U_vld_out),
    .ack_out(c_TREADY),
    .apdone_blk(regslice_both_c_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        a_TDATA_blk_n = a_TVALID_int_regslice;
    end else begin
        a_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        a_TREADY_int_regslice = 1'b1;
    end else begin
        a_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_idle_pp0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to0 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        b_TDATA_blk_n = b_TVALID_int_regslice;
    end else begin
        b_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        b_TREADY_int_regslice = 1'b1;
    end else begin
        b_TREADY_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1)))) begin
        c_TDATA_blk_n = c_TREADY_int_regslice;
    end else begin
        c_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start == 1'b1))) begin
        c_TVALID_int_regslice = 1'b1;
    end else begin
        c_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_TREADY = regslice_both_a_U_ack_in;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_c_U_apdone_blk == 1'b1) | (c_TREADY_int_regslice == 1'b0))) | ((ap_start == 1'b1) & ((1'b0 == a_TVALID_int_regslice) | (c_TREADY_int_regslice == 1'b0) | (b_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_c_U_apdone_blk == 1'b1) | (c_TREADY_int_regslice == 1'b0))) | ((ap_start == 1'b1) & ((1'b0 == a_TVALID_int_regslice) | (c_TREADY_int_regslice == 1'b0) | (b_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_both_c_U_apdone_blk == 1'b1) | (c_TREADY_int_regslice == 1'b0))) | ((ap_start == 1'b1) & ((1'b0 == a_TVALID_int_regslice) | (c_TREADY_int_regslice == 1'b0) | (b_TVALID_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((1'b0 == a_TVALID_int_regslice) | (c_TREADY_int_regslice == 1'b0) | (b_TVALID_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((regslice_both_c_U_apdone_blk == 1'b1) | (c_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_local_block = 1'b0;

assign ap_local_deadlock = 1'b0;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_TREADY = regslice_both_b_U_ack_in;

assign c_TDATA_int_regslice = (b_TDATA_int_regslice + a_TDATA_int_regslice);

assign c_TVALID = regslice_both_c_U_vld_out;

endmodule //adder
